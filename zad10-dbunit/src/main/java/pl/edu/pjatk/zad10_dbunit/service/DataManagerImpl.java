package pl.edu.pjatk.zad10_dbunit.service;

import pl.edu.pjatk.zad10_dbunit.domain.DataObject;
import pl.edu.pjatk.zad10_dbunit.domain.Person;

import java.sql.*;
import java.util.LinkedList;
import java.util.List;

public class DataManagerImpl implements  DataManager {

    private Connection connection;

    private PreparedStatement addDataStmt;
    private PreparedStatement getAllDataStmt;

    public DataManagerImpl(Connection connection) throws SQLException {
        this.connection = connection;
        ResultSet rs = connection.getMetaData().
                getTables(null, null, null,null);
        boolean tableExists = false;
        while (rs.next()) {
            if ("Person".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
                tableExists = true;
                break;
            }
        }

        if (!tableExists)
            connection.createStatement().executeUpdate("CREATE TABLE " +
                    "Person(id bigint GENERATED BY DEFAULT AS IDENTITY, " +
                    "name varchar(20), " +
                    "yob integer)");

        addDataStmt = connection
                .prepareStatement("INSERT INTO MOCK_DATA (color, currency, iban) VALUES (?, ?, ?)");
        getAllDataStmt = connection
                .prepareStatement("SELECT id, color, currency, iban FROM MOCK_DATA");
    }

    @Override
    public Connection getConnection() {
        return connection;
    }

    @Override
    public int addData(DataObject data) {
        int count = 0;
        try {
            addDataStmt.setString(1, data.getColor());
            addDataStmt.setString(2, data.getCurrency());
            addDataStmt.setString(3, data.getIban());
            count = addDataStmt.executeUpdate();
        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        return count;
    }

    public List<DataObject> getAllData() {
        List<DataObject> data = new LinkedList<>();
        try {
            ResultSet rs = getAllDataStmt.executeQuery();

            while (rs.next()) {
                DataObject dt = new DataObject();
                dt.setId(rs.getInt("id"));
                dt.setColor(rs.getString("color"));
                dt.setCurrency(rs.getString("currency"));
                dt.setIban(rs.getString("iban"));
                data.add(dt);
            }

        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        return data;
    }

}
