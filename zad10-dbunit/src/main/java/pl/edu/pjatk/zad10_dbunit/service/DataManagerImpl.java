package pl.edu.pjatk.zad10_dbunit.service;

import pl.edu.pjatk.zad10_dbunit.domain.DataObject;
import pl.edu.pjatk.zad10_dbunit.domain.Person;

import java.sql.*;
import java.util.LinkedList;
import java.util.List;

public class DataManagerImpl implements  DataManager {

    private Connection connection;

    private PreparedStatement addDataStmt;
    private PreparedStatement getAllDataStmt;
    private PreparedStatement updateDataStmt;
    private PreparedStatement deleteDataStmt;

    public DataManagerImpl(Connection connection) throws SQLException {
        this.connection = connection;
        ResultSet rs = connection.getMetaData().
                getTables(null, null, null,null);
        boolean tableExists = false;
        while (rs.next()) {
            if ("MOCK_DATA".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
                tableExists = true;
                break;
            }
        }

        if (!tableExists)
            connection.createStatement().executeUpdate("CREATE TABLE MOCK_DATA"+
            		" (id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT   BY   1) PRIMARY KEY,"
            		+"color VARCHAR(50),"
            		+"currency VARCHAR(50),"
            		+"iban  VARCHAR(50))");

        addDataStmt = connection
                .prepareStatement("INSERT INTO MOCK_DATA (color, currency, iban) VALUES (?, ?, ?)");
        getAllDataStmt = connection
                .prepareStatement("SELECT id, color, currency, iban FROM MOCK_DATA");
        updateDataStmt = connection
                .prepareStatement("UPDATE MOCK_DATA SET color=?, currency=?, iban=? WHERE id=?");
        deleteDataStmt = connection
                .prepareStatement("DELETE FROM MOCK_DATA WHERE id=?");
    }

    @Override
    public Connection getConnection() {
        return connection;
    }

    @Override
    public int addData(DataObject data) {
        int count = 0;
        try {
            addDataStmt.setString(1, data.getColor());
            addDataStmt.setString(2, data.getCurrency());
            addDataStmt.setString(3, data.getIban());
            count = addDataStmt.executeUpdate();
        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        return count;
    }

    public List<DataObject> getAllData() {
        List<DataObject> data = new LinkedList<>();
        try {
            ResultSet rs = getAllDataStmt.executeQuery();

            while (rs.next()) {
                DataObject dt = new DataObject();
                dt.setId(rs.getInt("id"));
                dt.setColor(rs.getString("color"));
                dt.setCurrency(rs.getString("currency"));
                dt.setIban(rs.getString("iban"));
                data.add(dt);
            }

        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        return data;
    }
    
    public int updateData(DataObject data){
    	int count = 0;
        try {
            updateDataStmt.setString(1, data.getColor());
            updateDataStmt.setString(2, data.getCurrency());
            updateDataStmt.setString(3, data.getIban());
            updateDataStmt.setInt(4, (int) data.getId());
            count = updateDataStmt.executeUpdate();
        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        return count;
    }
    
    public int deleteData(int id){
    	int count = 0;
        try {
            deleteDataStmt.setInt(1, id);
            count = deleteDataStmt.executeUpdate();
        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        return count;
    }
    
    public DataObject getDataByColor(String color){
    	List<DataObject> data = getAllData();
    	DataObject result = new DataObject();
    	for (DataObject tmp:data){
    		if (tmp.getColor().equals(color)){
    			result = tmp;
    		}
    	}
    	return result;
    }

}
