package pl.edu.pjatk.zad10_dbunit.service;

import pl.edu.pjatk.zad10_dbunit.domain.Person;

import java.sql.*;
import java.util.LinkedList;
import java.util.List;

public class PersonManagerImpl implements  PersonManager {

    private Connection connection;

    private PreparedStatement addPersonStmt;
    private PreparedStatement getAllPersonsStmt;
    private PreparedStatement updatePersonStmt;

    public PersonManagerImpl(Connection connection) throws SQLException {
        this.connection = connection;
        ResultSet rs = connection.getMetaData().
                getTables(null, null, null,null);
        boolean tableExists = false;
        while (rs.next()) {
            if ("PERSON".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
                tableExists = true;
                break;
            }
        }

        if (!tableExists)
            connection.createStatement().executeUpdate("CREATE TABLE " +
                    "PERSON(id bigint GENERATED BY DEFAULT AS IDENTITY, " +
                    "name varchar(20), " +
                    "yob integer," +
                    "dataObjectId integer)");

        addPersonStmt = connection
                .prepareStatement("INSERT INTO PERSON (name, yob, dataObjectId) VALUES (?, ?, ?)");
        getAllPersonsStmt = connection
                .prepareStatement("SELECT id, name, yob, dataObjectId FROM PERSON");
        updatePersonStmt = connection
                .prepareStatement("UPDATE PERSON SET name=?, yob=?, dataObjectId=? WHERE id=?");
    }

    @Override
    public Connection getConnection() {
        return connection;
    }

    @Override
    public int addPerson(Person person) {
        int count = 0;
        try {
            addPersonStmt.setString(1, person.getName());
            addPersonStmt.setInt(2, person.getYob());
            addPersonStmt.setInt(3, (int)person.getDataObject_id());
            count = addPersonStmt.executeUpdate();
        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        return count;
    }

    public List<Person> getAllPersons() {
        List<Person> persons = new LinkedList<>();
        try {
            ResultSet rs = getAllPersonsStmt.executeQuery();

            while (rs.next()) {
                Person p = new Person();
                p.setId(rs.getInt("id"));
                p.setName(rs.getString("name"));
                p.setYob(rs.getInt("yob"));
                p.setDataObject_id(rs.getLong("dataObjectId"));
                persons.add(p);
            }

        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        return persons;
    }
    
    public Person getPersonByName(String name){
    	List<Person> persons = getAllPersons();
    	Person result = new Person();
    	for(Person tmp: persons){
    		if (tmp.getName().equals(name)){
    			result = tmp;
    		}
    	}
        return result;
    }
    
    public int updatePerson(Person person){
    	int count = 0;
        try {
            updatePersonStmt.setString(1, person.getName());
            updatePersonStmt.setInt(2, person.getYob());
            updatePersonStmt.setLong(3, person.getDataObject_id());
            updatePersonStmt.setLong(4, person.getId());
            count = updatePersonStmt.executeUpdate();
        } catch (SQLException e) {
            throw new IllegalStateException(e.getMessage() + "\n" + e.getStackTrace().toString());
        }
        return count;
    }
    public List<Person> getPersonByDataObjectId(long id){
    	List<Person> persons = getAllPersons();
    	List<Person> result = new LinkedList<Person>();
    	for(Person tmp: persons){
    		if (tmp.getDataObject_id()==id){
    			result.add(tmp);
    		}
    	}
        return result;
    }

}
